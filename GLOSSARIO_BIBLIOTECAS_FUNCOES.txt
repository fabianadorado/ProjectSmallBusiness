==============================
GLOSSÁRIO DE BIBLIOTECAS E FUNÇÕES DO PROGRAMA (ATUALIZADO 2024)
==============================

Este glossário está organizado por classe. Para cada classe, listamos as bibliotecas utilizadas, explicamos como funcionam, mostramos exemplos reais do código e detalhamos as funções principais.

------------------------------
BIBLIOTECAS PRINCIPAIS UTILIZADAS NO SISTEMA
------------------------------

**<iostream>**
- **O que faz:** Fornece funcionalidades de entrada e saída padrão.
- **Funções principais:**
  - `cout` - Saída para console
  - `cin` - Entrada do console
  - `getline()` - Leitura de linha completa
- **Exemplo real do código:**
  ```cpp
  cout << BG_GRAY << FG_BLUE << "ID do produto: ";
  getline(cin, input);
  ```

**<string>**
- **O que faz:** Manipulação de strings.
- **Funções principais:**
  - `length()` - Tamanho da string
  - `substr()` - Extrair substring
  - `find()` - Encontrar substring
  - `replace()` - Substituir caracteres
- **Exemplo real do código:**
    ```cpp
  string nome = produto.getNome();
  if (nome.length() > 20) {
      nome = nome.substr(0, 20);
  }
  ```

**<vector>**
- **O que faz:** Container dinâmico para armazenar elementos.
- **Funções principais:**
  - `push_back()` - Adicionar elemento
  - `size()` - Tamanho do vetor
  - `begin()/end()` - Iteradores
  - `erase()` - Remover elemento
- **Exemplo real do código:**
    ```cpp
  vector<Produto> produtos;
  produtos.push_back(novoProduto);
  for (const auto& p : produtos) {
      cout << p.getNome() << endl;
  }
  ```

**<iomanip>**
- **O que faz:** Formatação de entrada/saída.
- **Funções principais:**
  - `setw()` - Definir largura
  - `setprecision()` - Definir precisão decimal
  - `left/right` - Alinhamento
  - `fixed` - Formato fixo
- **Exemplo real do código:**
    ```cpp
  cout << left << setw(20) << nome << right << setw(10) << fixed << setprecision(2) << preco;
  ```

**<sstream>**
- **O que faz:** Streams de string para conversões.
- **Funções principais:**
  - `istringstream` - Leitura de string
  - `ostringstream` - Escrita para string
  - `str()` - Obter string
- **Exemplo real do código:**
    ```cpp
  istringstream iss(input);
  if (iss >> valor && valor > 0) {
      return valor;
  }
  ```

**<algorithm>**
- **O que faz:** Algoritmos genéricos.
- **Funções principais:**
  - `sort()` - Ordenar
  - `find_if()` - Buscar com condição
  - `all_of()` - Verificar todos os elementos
- **Exemplo real do código:**
  ```cpp
  sort(produtos.begin(), produtos.end(), [](const Produto& a, const Produto& b) {
      return a.getId() < b.getId();
  });
  ```

**<fstream>**
- **O que faz:** Operações com arquivos.
- **Funções principais:**
  - `ofstream` - Escrita em arquivo
  - `ifstream` - Leitura de arquivo
  - `open()/close()` - Abrir/fechar arquivo
- **Exemplo real do código:**
  ```cpp
  ofstream arquivo("produtos.txt");
  arquivo << produto.getId() << " " << produto.getNome() << endl;
  arquivo.close();
  ```

**<map>**
- **O que faz:** Container associativo chave-valor.
- **Funções principais:**
  - `insert()` - Inserir par chave-valor
  - `find()` - Buscar por chave
  - `operator[]` - Acesso por chave
- **Exemplo real do código:**
  ```cpp
  map<string, int> vendasPorProduto;
  vendasPorProduto[nomeProduto] += quantidade;
  ```

**<limits>**
- **O que faz:** Constantes de limites numéricos.
- **Funções principais:**
  - `numeric_limits<streamsize>::max()` - Máximo valor para stream
- **Exemplo real do código:**
  ```cpp
  cin.ignore(numeric_limits<streamsize>::max(), '\n');
  ```

**<random>**
- **O que faz:** Geração de números aleatórios.
- **Funções principais:**
  - `mt19937` - Gerador Mersenne Twister
  - `uniform_int_distribution` - Distribuição uniforme
- **Exemplo real do código:**
```cpp
  mt19937 gerador(random_device{}());
  uniform_int_distribution<int> distribuidor(10000, 99999);
  numeroFatura = to_string(distribuidor(gerador));
  ```

**<ctime>**
- **O que faz:** Funções de data e hora.
- **Funções principais:**
  - `time()` - Tempo atual
  - `localtime()` - Converter para tempo local
- **Exemplo real do código:**
  ```cpp
  time_t agora = time(0);
  tm* tempoLocal = localtime(&agora);
  ```

**<windows.h>**
- **O que faz:** Funções específicas do Windows.
- **Funções principais:**
  - `Sleep()` - Pausar execução
  - `system()` - Executar comando do sistema
- **Exemplo real do código:**
  ```cpp
  system("cls");  // Limpar tela
  Sleep(1000);    // Pausar 1 segundo
  ```

**<regex>**
- **O que faz:** Expressões regulares.
- **Funções principais:**
  - `regex_match()` - Verificar se string corresponde ao padrão
- **Exemplo real do código:**
  ```cpp
  regex telefoneRegex("^\\d{9}$");
  if (regex_match(telefone, telefoneRegex)) {
      return telefone;
  }
```

------------------------------
FUNÇÕES DE BIBLIOTECA MAIS UTILIZADAS
------------------------------

**Conversão de Strings:**
```cpp
// String para número
string input = "123";
int valor = stoi(input);  // String to int
double preco = stod(input);  // String to double

// Número para string
int id = 5;
string idStr = to_string(id);
```

**Formatação de Strings:**
```cpp
// Usando sstream
ostringstream oss;
oss << fixed << setprecision(2) << preco;
string precoFormatado = oss.str();

// Usando string
string nome = "João";
string saudacao = "Olá, " + nome + "!";
```

**Iteração em Containers:**
```cpp
// Range-based for (C++11)
for (const auto& produto : produtos) {
    cout << produto.getNome() << endl;
}

// Iterador tradicional
for (auto it = produtos.begin(); it != produtos.end(); ++it) {
    cout << it->getNome() << endl;
}
```

**Validação de Entrada:**
```cpp
// Verificar se string contém apenas dígitos
bool soDigitos = !input.empty() && all_of(input.begin(), input.end(), ::isdigit);

// Verificar se número está em range
if (valor >= 0 && valor <= 1000) {
    // Valor válido
}
```

**Manipulação de Arquivos:**
```cpp
// Verificar se arquivo existe
ifstream arquivo(nomeArquivo);
bool existe = arquivo.good();
arquivo.close();

// Ler arquivo linha por linha
string linha;
while (getline(arquivo, linha)) {
    // Processar linha
}
```

------------------------------
CLASSE PRODUTO
------------------------------

**Bibliotecas utilizadas:**
- `<string>`: Armazena nome do produto.
- `<iostream>`: Exibe informações do produto.
- `<iomanip>`: Formata saída (ex: casas decimais).
- `<locale>`: Suporte a acentuação.
- `<sstream>`: Formatação de strings.

**Exemplos e funções:**
- **<string>**
  - Usada para armazenar e manipular o nome do produto.
  - Exemplo:
    ```cpp
    string nome = "COCA-COLA";
    ```
- **<iostream>**
  - Exibe informações do produto.
    ```cpp
    cout << produto.getNome() << endl;
    ```
- **<iomanip>**
  - Formata valores monetários.
    ```cpp
    cout << fixed << setprecision(2) << preco << endl;
    ```
- **<sstream>**
  - Monta strings formatadas para exibição.
    ```cpp
    ostringstream oss;
    oss << fixed << setprecision(2) << preco;
    string precoFormatado = oss.str();
    ```

**Funções principais:**

- **int getId() const**
  - Retorna o ID único do produto.
  - Exemplo:
    ```cpp
    int id = produto.getId();
    ```

- **string getNome() const**
  - Retorna o nome do produto (sempre em maiúsculas).
  - Exemplo:
    ```cpp
    cout << produto.getNome();
    ```

- **int getQuantidade() const**
  - Retorna a quantidade em estoque do produto.
  - Exemplo:
    ```cpp
    int qtd = produto.getQuantidade();
    ```

- **double getPrecoCusto() const**
  - Retorna o preço de custo do produto.
  - Exemplo:
```cpp
    double preco = produto.getPrecoCusto();
    ```

- **double getPrecoVenda() const**
  - Retorna o preço de venda do produto (com margem de lucro).
  - Exemplo:
    ```cpp
    double venda = produto.getPrecoVenda();
    ```

- **double getPrecoVendaComIVA() const**
  - Retorna o preço de venda do produto já com IVA.
  - Exemplo:
    ```cpp
    double final = produto.getPrecoVendaComIVA();
    ```

- **void adicionarStock(int qtd)**
  - Adiciona quantidade ao estoque do produto.
  - Exemplo:
    ```cpp
    produto.adicionarStock(10);
    ```

- **void removerStock(int qtd)**
  - Remove quantidade do estoque, se houver suficiente.
  - Exemplo:
    ```cpp
    produto.removerStock(2);
    ```

- **void setId(int novoId)**
  - Define o ID do produto (usado em importação de dados).
  - Exemplo:
    ```cpp
    produto.setId(5);
    ```

- **void setPrecoCusto(double novoPreco)**
  - Altera o preço de custo do produto.
  - Exemplo:
    ```cpp
    produto.setPrecoCusto(3.99);
```

------------------------------
CLASSE CLIENTE
------------------------------

**Bibliotecas utilizadas:**
- `<string>`: Armazena nome, telefone, morada, data de nascimento.
- `<iostream>`: Exibe informações do cliente.
- `<sstream>`: Formatação de strings para exibição.
- `<vector>`: Lista de IDs disponíveis para reutilização.
- `<algorithm>`: Ordenação de IDs disponíveis.
- `<iomanip>`: Formatação de saída em tabelas.

**Exemplos e funções:**
- **<vector>**
  - Armazena IDs disponíveis para reutilização.
```cpp
    static vector<int> idsDisponiveis;
    ```
- **<algorithm>**
  - Ordena a lista de IDs disponíveis.
    ```cpp
    sort(idsDisponiveis.begin(), idsDisponiveis.end());
    ```
- **<sstream>**
  - Monta string formatada para exibição.
    ```cpp
    stringstream dadosCliente;
    dadosCliente << "ID: " << idCliente;
    ```
- **<iomanip>**
  - Formata colunas em tabelas.
    ```cpp
    cout << left << setw(20) << nome << setw(15) << telefone;
    ```

**Funções principais:**

- **int getIdCliente() const**
  - Retorna o ID do cliente.
  - Exemplo:
    ```cpp
    int id = cliente.getIdCliente();
    ```

- **string getNome() const**
  - Retorna o nome do cliente.
  - Exemplo:
    ```cpp
    cout << cliente.getNome();
    ```

- **string getTelefone() const**
  - Retorna o telefone do cliente.
  - Exemplo:
    ```cpp
    cout << cliente.getTelefone();
    ```

- **string getMorada() const**
  - Retorna a morada/endereço do cliente.
  - Exemplo:
    ```cpp
    cout << cliente.getMorada();
    ```

- **string getDataNascimento() const**
  - Retorna a data de nascimento do cliente.
  - Exemplo:
    ```cpp
    cout << cliente.getDataNascimento();
    ```

- **double getTotalComprado() const**
  - Retorna o valor total já comprado pelo cliente.
  - Exemplo:
    ```cpp
    double total = cliente.getTotalComprado();
    ```

- **void setIdCliente(int id)**
  - Define o ID do cliente (usado em importação de dados).
  - Exemplo:
    ```cpp
    cliente.setIdCliente(10);
    ```

- **void setNome(string nome)**
  - Altera o nome do cliente.
  - Exemplo:
    ```cpp
    cliente.setNome("João Silva");
    ```

- **void setTelefone(string telefone)**
  - Altera o telefone do cliente.
  - Exemplo:
    ```cpp
    cliente.setTelefone("912345678");
    ```

- **void setMorada(string morada)**
  - Altera a morada/endereço do cliente.
  - Exemplo:
    ```cpp
    cliente.setMorada("Rua X, 123");
    ```

- **void setDataNascimento(const string& data)**
  - Altera a data de nascimento do cliente.
  - Exemplo:
    ```cpp
    cliente.setDataNascimento("01/01/2000");
    ```

- **void liberarId()**
  - Libera o ID do cliente para reutilização (ao excluir cliente).
  - Exemplo:
    ```cpp
    cliente.liberarId();
    ```

- **void adicionarCompra(double valor)**
  - Soma valor ao total comprado pelo cliente.
  - Exemplo:
    ```cpp
    cliente.adicionarCompra(50.0);
    ```

- **string toString() const**
  - Retorna uma string formatada com os dados do cliente.
  - Exemplo:
    ```cpp
    cout << cliente.toString();
    ```

------------------------------
CLASSE VENDA
------------------------------

**Bibliotecas utilizadas:**
- `<string>`: Armazena nomes, número de fatura, dados do cliente.
- `<vector>`: Lista de itens da venda.
- `<iomanip>`: Formatação de valores monetários.
- `<sstream>`: Formatação de strings e conversões.
- `<random>`: Geração de número de fatura aleatório.
- `<chrono>`: Semente aleatória para gerador.
- `<ctime>`: Data/hora do recibo.
- `<iostream>`: Exibe recibo e mensagens.
- `<algorithm>`: Busca e remoção de itens.

**Exemplos e funções:**
- **<random> e <chrono>**
  - Geram número de fatura único.
    ```cpp
    mt19937 gerador(random_device{}());
    uniform_int_distribution<int> distribuidor(10000, 99999);
    numeroFatura = to_string(distribuidor(gerador));
    ```
- **<ctime>**
  - Obtém data/hora atual para o recibo.
    ```cpp
    time_t agora = time(0);
    tm* tempoLocal = localtime(&agora);
    ```
- **<algorithm>**
  - Remove item do vetor de itens.
    ```cpp
    auto it = find_if(itens.begin(), itens.end(), [numeroLinha](const ItemVenda& item) {
        return item.numeroLinha == numeroLinha;
    });
    itens.erase(it);
    ```

**Funções principais:**

- **void adicionarItem(const string& nomeProduto, int quantidade, double precoUnit, double precoCusto)**
  - Adiciona um item à venda.
  - Exemplo:
    ```cpp
    venda.adicionarItem("COCA-COLA", 2, 3.00, 2.00);
    ```

- **void finalizarVenda(double valorEntregue)**
  - Finaliza a venda, calcula troco e status.
  - Exemplo:
    ```cpp
    venda.finalizarVenda(20.0);
    ```

- **void imprimirTalao(const std::string& margemCentral) const**
  - Imprime o talão/recibo da venda.
  - Exemplo:
    ```cpp
    venda.imprimirTalao("    ");
    ```

- **void removerItemPorLinha(int numeroLinha)**
  - Remove um item da venda pela linha.
  - Exemplo:
```cpp
    venda.removerItemPorLinha(1);
    ```

- **void cancelarVenda()**
  - Cancela a venda atual.
  - Exemplo:
    ```cpp
    venda.cancelarVenda();
    ```

- **string getNumeroFatura() const**
  - Retorna o número da fatura da venda.
  - Exemplo:
    ```cpp
    string nf = venda.getNumeroFatura();
    ```

- **int getIdCliente() const**
  - Retorna o ID do cliente da venda.
  - Exemplo:
    ```cpp
    int id = venda.getIdCliente();
    ```

- **double getValorTotal() const**
  - Retorna o valor total da venda.
  - Exemplo:
    ```cpp
    double total = venda.getValorTotal();
    ```

- **double getTroco() const**
  - Retorna o troco da venda.
  - Exemplo:
```cpp
    double troco = venda.getTroco();
    ```

- **double getTotalComIVA() const**
  - Retorna o valor total da venda com IVA.
  - Exemplo:
```cpp
    double totalIVA = venda.getTotalComIVA();
```

- **bool isGratis() const**
  - Indica se a venda foi gratuita (promoção).
  - Exemplo:
```cpp
    if (venda.isGratis()) { /* ... */ }
```

- **void setNomeCliente(const string& nome)**
  - Define o nome do cliente na venda.
  - Exemplo:
```cpp
    venda.setNomeCliente("Maria");
```

- **void setDataNascimentoCliente(const string& data)**
  - Define a data de nascimento do cliente na venda.
  - Exemplo:
```cpp
    venda.setDataNascimentoCliente("01/01/2000");
    ```

- **void setMonstersPoints(int pts)**
  - Define os pontos Monsters da venda.
  - Exemplo:
```cpp
    venda.setMonstersPoints(10);
```

- **int getMonstersPoints() const**
  - Retorna os pontos Monsters da venda.
  - Exemplo:
```cpp
    int pts = venda.getMonstersPoints();
    ```

------------------------------
CLASSE LOJA
------------------------------

**Bibliotecas utilizadas:**
- `<vector>`: Armazena produtos, clientes, vendas.
- `<string>`: Manipula nomes, mensagens, caminhos de arquivo.
- `<map>`: Relatórios e agrupamentos de dados.
- `<fstream>`: Leitura e escrita de arquivos.
- `<algorithm>`: Ordenação, busca e transformações.
- `<iostream>`: Exibe relatórios e mensagens.
- `<sstream>`: Conversão e formatação de dados.
- `<limits>`: Limpa buffer de entrada.
- `<locale>`: Suporte a acentuação.

**Exemplos e funções:**
- **<map>**
  - Agrupa vendas por produto em relatórios.
    ```cpp
    map<string, int> vendasPorProduto;
    vendasPorProduto[produto] += quantidade;
    ```
- **<fstream>**
  - Salva e carrega dados em arquivos.
    ```cpp
    ofstream arquivo("produtos.txt");
    arquivo << produto.getId() << " " << produto.getNome() << endl;
    arquivo.close();
    ```
- **<limits>**
  - Limpa buffer de entrada após leitura.
    ```cpp
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    ```

**Funções principais:**

- **void criarProduto(const string& nome, int quantidade, double precoCusto)**
  - Cria um novo produto no estoque.
  - Exemplo:
    ```cpp
    loja.criarProduto("COCA-COLA", 10, 2.50);
    ```

- **void adicionarStock(int idProduto, int quantidade)**
  - Adiciona estoque a um produto existente.
  - Exemplo:
    ```cpp
    loja.adicionarStock(1, 5);
    ```

- **void listarProdutos() const**
  - Lista todos os produtos cadastrados.
  - Exemplo:
    ```cpp
    loja.listarProdutos();
    ```

- **void criarCliente(const string& nome, const string& telefone, const string& morada, const string& dataNascimento)**
  - Cria um novo cliente.
  - Exemplo:
```cpp
    loja.criarCliente("João", "912345678", "Rua X", "01/01/2000");
    ```

- **void eliminarCliente(int idCliente)**
  - Remove um cliente do sistema.
  - Exemplo:
    ```cpp
    loja.eliminarCliente(2);
    ```

- **void alterarNomeCliente(int idCliente, const string& novoNome)**
  - Altera o nome de um cliente.
  - Exemplo:
    ```cpp
    loja.alterarNomeCliente(2, "Carlos");
    ```

- **void listarClientes() const**
  - Lista todos os clientes cadastrados.
  - Exemplo:
    ```cpp
    loja.listarClientes();
    ```

- **void efetuarVenda()**
  - Inicia o processo de venda.
  - Exemplo:
```cpp
    loja.efetuarVenda();
```

- **void mostrarResumoVenda(const Venda& venda) const**
  - Mostra o resumo de uma venda.
  - Exemplo:
```cpp
    loja.mostrarResumoVenda(venda);
```

- **void relatorioStock() const**
  - Gera relatório de estoque.
  - Exemplo:
```cpp
    loja.relatorioStock();
```

- **void relatorioTotalVendas() const**
  - Gera relatório do total de vendas.
  - Exemplo:
```cpp
    loja.relatorioTotalVendas();
```

- **void relatorioGraficoVendas() const**
  - Gera gráfico de vendas.
  - Exemplo:
```cpp
    loja.relatorioGraficoVendas();
```

- **void relatorioVendasDetalhadoPorProduto() const**
  - Gera relatório detalhado de vendas por produto.
  - Exemplo:
```cpp
    loja.relatorioVendasDetalhadoPorProduto();
    ```

- **void listarHistoricoVendas() const**
  - Lista o histórico de vendas.
  - Exemplo:
```cpp
    loja.listarHistoricoVendas();
    ```

- **void reporEstoqueItem(const ItemVenda& item)**
  - Repõe o estoque de um item de venda cancelada.
  - Exemplo:
    ```cpp
    loja.reporEstoqueItem(item);
    ```

- **void reporEstoqueVenda(const Venda& venda)**
  - Repõe o estoque de todos os itens de uma venda cancelada.
  - Exemplo:
    ```cpp
    loja.reporEstoqueVenda(venda);
    ```

------------------------------
CLASSE MENU
------------------------------

**Bibliotecas utilizadas:**
- `<iostream>`: Exibe menus e lê opções.
- `<vector>`: Lista de opções do menu.
- `<string>`: Títulos e opções dos menus.
- `<windows.h>`: Limpeza de tela e formatação.

**Exemplos e funções:**
- **<vector>**
  - Armazena opções do menu.
    ```cpp
    vector<string> opcoes = {"Efetuar Vendas", "Gerir Produtos", "Sair"};
    ```
- **<windows.h>**
  - Limpa a tela antes de exibir menu.
    ```cpp
    system("cls");
    ```

**Funções principais:**

- **int menuPrincipal()**
  - Exibe o menu principal e retorna a opção escolhida.
  - Exemplo:
    ```cpp
    int op = menu.menuPrincipal();
    ```

- **int menuGerirProdutos()**
  - Exibe o menu de gestão de produtos.
  - Exemplo:
    ```cpp
    int op = menu.menuGerirProdutos();
    ```

- **int menuGerirClientes()**
  - Exibe o menu de gestão de clientes.
  - Exemplo:
    ```cpp
    int op = menu.menuGerirClientes();
    ```

- **int menuRelatorios()**
  - Exibe o menu de relatórios.
  - Exemplo:
    ```cpp
    int op = menu.menuRelatorios();
    ```

------------------------------
CLASSE AUXILIAR
------------------------------

**Bibliotecas utilizadas:**
- `<iostream>`: Entrada/saída e limpeza de buffer.
- `<string>`: Manipulação de strings.
- `<sstream>`: Conversões e formatação.
- `<algorithm>`: Transformações de strings.
- `<cctype>`: Verificação de tipos de caracteres.
- `<sys/stat.h>`: Verificação de existência de arquivos.
- `<windows.h>`: Funções do sistema Windows.
- `<locale>`: Suporte a acentuação.
- `<codecvt>`: Conversões de encoding.
- `<regex>`: Validação com expressões regulares.
- `<limits>`: Constantes de limites.

**Exemplos e funções:**
- **<cctype>**
  - Verifica se caractere é alfanumérico.
```cpp
    if (isalnum(static_cast<unsigned char>(c))) {
        resultado += c;
    }
    ```
- **<sys/stat.h>**
  - Verifica se arquivo existe.
    ```cpp
    struct stat buffer;
    return (stat(nomeArquivo.c_str(), &buffer) == 0);
    ```
- **<regex>**
  - Valida formato de telefone.
    ```cpp
    regex telefoneRegex("^\\d{9}$");
    if (regex_match(telefone, telefoneRegex)) {
        return telefone;
    }
    ```

**Funções principais:**

- **int lernumero(const string& mensagem)**
  - Lê e valida um número inteiro positivo do usuário.
  - Exemplo:
```cpp
    int id = lernumero("ID do produto: ");
    ```

- **double lerFloatPositivo(const string& mensagem)**
  - Lê e valida um número real positivo do usuário.
  - Exemplo:
```cpp
    double preco = lerFloatPositivo("Preço: ");
    ```

- **string toLower(const string& str)**
  - Converte uma string para minúsculas.
  - Exemplo:
    ```cpp
    string min = toLower("ABcD");
    ```

- **string toUpper(const string& str)**
  - Converte uma string para maiúsculas.
  - Exemplo:
    ```cpp
    string maius = toUpper("abc");
    ```

- **void limparBuffer()**
  - Limpa o buffer de entrada do teclado.
  - Exemplo:
    ```cpp
    limparBuffer();
    ```

- **void desenharLinhaHorizontal(const string& inicio, const string& fim, size_t largura)**
  - Desenha uma linha horizontal com caracteres personalizados.
  - Exemplo:
    ```cpp
    desenharLinhaHorizontal("+", "+", 40);
    ```

- **void desenharLinhaHorizontalVenda(const string& inicio, const string& fim, size_t largura)**
  - Desenha linha horizontal para tabelas de venda.
  - Exemplo:
    ```cpp
    desenharLinhaHorizontalVenda("|", "|", 30);
    ```

- **string repetir(const string& s, size_t n)**
  - Repete uma string n vezes.
  - Exemplo:
    ```cpp
    string linha = repetir("-", 10);
    ```

- **void desenharCaixaTitulo(const string& titulo, size_t largura)**
  - Desenha uma caixa com título centralizado.
  - Exemplo:
```cpp
    desenharCaixaTitulo("PRODUTOS", 40);
    ```

- **int mostrarMenu(const string& titulo, const vector<string>& opcoes)**
  - Exibe um menu com opções e retorna a escolhida.
  - Exemplo:
```cpp
    int op = mostrarMenu("MENU", {"Op1", "Op2"});
    ```

- **bool arquivoExiste(const string& nomeArquivo)**
  - Verifica se um arquivo existe.
  - Exemplo:
```cpp
    if (arquivoExiste("produtos.txt")) { ... }
    ```

- **void criarDiretorioSeNaoExistir(const string& nomeDiretorio)**
  - Cria um diretório se ele não existir.
  - Exemplo:
```cpp
    criarDiretorioSeNaoExistir("dados_loja");
    ```

- **void imprimirLinhaInterna(const string& margem, int largura, const string& conteudo, const string& corFundo, const string& corTexto, const string& reset)**
  - Imprime uma linha de tabela formatada.
  - Exemplo:
```cpp
    imprimirLinhaInterna("    ", 40, BG_GRAY, FG_BLUE, RESET, "Produto");
```

- **void imprimirLinhaHorizontalBranca(const string& margem, int largura, const string& corFundo, const string& corTexto, const string& reset)**
  - Imprime uma linha horizontal branca.
  - Exemplo:
```cpp
    imprimirLinhaHorizontalBranca("    ", 40, BG_GRAY, FG_BLUE, RESET);
    ```

- **void imprimirLinhaTabela(const vector<string>& colunas, const vector<int>& larguras)**
  - Imprime uma linha de cabeçalho de tabela.
  - Exemplo:
    ```cpp
    imprimirLinhaTabela({"Nome", "Qtd"}, {20, 5});
    ```

- **void imprimirTituloCentralizado(const string& titulo, int largura, const string& margem = "    ")**
  - Imprime um título centralizado.
  - Exemplo:
    ```cpp
    imprimirTituloCentralizado("RELATÓRIO", 40);
    ```

- **string lerTelefone(const string& mensagem)**
  - Lê e valida um telefone (9 dígitos).
  - Exemplo:
    ```cpp
    string tel = lerTelefone("Telefone: ");
    ```

- **string formatarTelefone(const string& telefone)**
  - Formata telefone para xxxxx-xxxx.
  - Exemplo:
    ```cpp
    string f = formatarTelefone("912345678");
    ```

- **string centro(const string& texto, int largura)**
  - Centraliza texto em uma largura fixa.
  - Exemplo:
    ```cpp
    string c = centro("TEXTO", 20);
    ```

- **bool confirmarAcao(const std::string& mensagem)**
  - Pergunta ao usuário se deseja confirmar uma ação (s/n).
  - Exemplo:
    ```cpp
    if (confirmarAcao("Deseja excluir?")) { ... }
    ```

- **bool desejaContinuar(const std::string& mensagem = "Deseja realizar outra operacao?")**
  - Pergunta ao usuário se deseja continuar (s/n).
  - Exemplo:
```cpp
    if (desejaContinuar()) { ... }
    ```

- **std::string trim(const std::string& str)**
  - Remove espaços em branco do início e fim da string.
  - Exemplo:
```cpp
    string limpo = trim("  texto  ");
```

- **void preencherTela(const std::string& bgColor, const std::string& fgColor, int linhas = 40, int colunas = 120)**
  - Preenche a tela do console com cor de fundo e texto.
  - Exemplo:
```cpp
    preencherTela(BG_GRAY, FG_BLUE);
    ```

- **string normalizarNomeProduto(const string& nome)**
  - Remove acentos e pontuação, converte para maiúsculas.
  - Exemplo:
```cpp
    string norm = normalizarNomeProduto("Coca-Cola");
    ```

- **string alinhar(const string& texto, int largura)**
  - Alinha texto à esquerda em largura fixa.
  - Exemplo:
```cpp
    string a = alinhar("abc", 10);
```

- **void imprimirCabecalhoDetalhadoTabela(const std::string& margem, int wProd, int wQtd, int wUnit, int wTotal, int wCusto, int wLucro)**
  - Imprime cabeçalho detalhado para tabelas de produtos/vendas.
  - Exemplo:
```cpp
    imprimirCabecalhoDetalhadoTabela("    ", 20, 5, 10, 10, 10, 10);
    ```

- **string centroExato(const string& texto, int largura)**
  - Centraliza texto exatamente na largura.
  - Exemplo:
    ```cpp
    string ce = centroExato("TEXTO", 20);
    ```

- **int lerIDPositivo(const std::string& mensagem)**
  - Lê e valida um ID positivo do usuário.
  - Exemplo:
    ```cpp
    int id = lerIDPositivo("ID: ");
    ```

- **void desenharNALATA()**
  - Exibe o banner ASCII art "NALATA" centralizado.
  - Exemplo:
    ```cpp
    desenharNALATA();
    ```

------------------------------
ATUALIZAÇÕES RECENTES DE UX, ENTRADA E VISUAL (2024)
==============================

Resumo: Esta seção documenta as principais melhorias feitas no sistema para garantir uma experiência de uso mais fluida, visualmente consistente e robusta na entrada de dados. Todas as mudanças seguem o padrão de explicação e exemplos reais do código.

------------------------------
ENTRADA DE DADOS E VALIDAÇÃO
------------------------------

**Explicação:**
- Todos os fluxos de entrada agora usam `getline` para leitura, evitando problemas de buffer e garantindo que apenas um Enter seja necessário por ação.
- A função `lerIDPositivo` foi padronizada para aceitar apenas números positivos, exibindo o campo de entrada com fundo cinza (`BG_GRAY`) e texto azul (`FG_BLUE`). O texto digitado pelo usuário também aparece em azul sobre fundo cinza.
- Mensagens de erro usam texto vermelho (`RED`) sobre fundo cinza.
- Remoção de todos os `cin.ignore` desnecessários, eliminando enters extras em cadastros, alterações, remoções e relatórios.

**Exemplo real do programa:**
```cpp
std::cout << mensagem << BG_GRAY << FG_BLUE << flush;
std::getline(std::cin, input);
std::cout << RESET;
bool soDigitos = !input.empty() && std::all_of(input.begin(), input.end(), ::isdigit);
if (soDigitos) {
    int id = std::stoi(input);
    if (id > 0) return id;
}
std::cout << BG_GRAY << RED << MARGEM << "ID inválido. " << RESET << std::endl;
```

------------------------------
MENUS E NAVEGAÇÃO
------------------------------

**Explicação:**
- A função `mostrarMenu` agora lê a opção do menu usando `getline` e converte para inteiro, evitando loops infinitos e aceitando apenas números válidos.
- Se o usuário digitar uma letra ou valor inválido, retorna -1 e exibe "Opção inválida!" sem travar o menu.
- Todos os menus (principal, produtos, clientes, relatórios) seguem o mesmo padrão de cor e navegação.

**Exemplo real do programa:**
```cpp
int opcao = 0;
std::string input;
std::getline(std::cin, input);
std::istringstream iss(input);
if (!(iss >> opcao)) {
    opcao = -1; // Valor impossível para forçar erro
}
```

------------------------------
CONSISTÊNCIA VISUAL E UX
------------------------------

**Explicação:**
- Todos os prompts de entrada (ID, nome, telefone, etc.) usam fundo cinza (`BG_GRAY`) e texto azul (`FG_BLUE`), inclusive o campo de digitação do usuário.
- Mensagens de erro usam texto vermelho (`RED`) sobre fundo cinza.
- Não há mais enters extras entre tabelas e prompts (ex: "ID do Produto:", "ID do Cliente:").
- Após relatórios e listagens, só um Enter é necessário para voltar ao menu, usando apenas `cin.get()`.
- Todos os relatórios agora exibem "Pressione Enter para voltar..." e usam apenas um `cin.get()` para retornar ao menu.

**Exemplo real do programa:**
```cpp
cout << BG_GRAY << FG_BLUE << std::string(MARGEM) << "Pressione Enter para voltar..." << RESET;
cin.get();
```

------------------------------
FLUXOS DE CONFIRMAÇÃO E VALIDAÇÃO DE ID
------------------------------

**Explicação:**
- Ao digitar um ID inexistente (cliente/produto), o sistema pergunta se deseja tentar novamente (s/n). Se "n", retorna ao menu anterior.
- Confirmações de remoção e alteração seguem o mesmo padrão visual e de navegação.

**Exemplo real do programa:**
```cpp
if (!clienteEncontrado) {
    cout << BG_GRAY << RED << std::string(MARGEM) << "ID inválido. Digite apenas números de um cliente existente." << RESET << endl;
    string resposta;
    while (true) {
        cout << BG_GRAY << FG_BLUE << std::string(MARGEM) << "Deseja tentar novamente? (s/n): ";
        getline(cin, resposta);
        if (!resposta.empty() && (resposta[0] == 's' || resposta[0] == 'S')) {
            // Tenta novamente
            break;
        } else if (!resposta.empty() && (resposta[0] == 'n' || resposta[0] == 'N')) {
            // Cancela operação
            return;
        }
    }
}
```

------------------------------
MACROS DE COR E PADRÃO VISUAL
------------------------------

**Explicação:**
- Macros de cor padronizadas: `BG_GRAY`, `FG_BLUE`, `FG_BLACK`, `BG_BLUE`, `RESET`, `RED`, `GREEN`, `YELLOW`, `CYAN`, `BOLD`, `FG_BRIGHT_GRAY`, `FG_BRIGHT_WHITE`.
- Menus: fundo azul, texto cinza/azul.
- Prompts e tabelas: fundo cinza, texto azul.
- Mensagens de erro: texto vermelho sobre cinza.
- Talão/recibo: fundo branco, texto preto.

**Exemplo real do programa:**
```cpp
cout << BG_GRAY << FG_BLUE << std::string(MARGEM) << "ID do cliente: " << BG_GRAY << FG_BLUE << flush;
```

------------------------------
FUNÇÕES AUXILIARES E LAYOUT
------------------------------

**Explicação:**
- Funções como `preencherTela`, `imprimirLinhaInterna`, `imprimirTituloCentralizado`, `centro`, `alinhar`, `repetir` continuam centralizando a lógica de layout e cor.
- ASCII art e banners sempre centralizados e exibidos acima dos menus.

**Exemplo real do programa:**
```cpp
preencherTela(BG_GRAY, FG_BLUE, 40, 120);
```

FIM DO DOCUMENTO
------------------------------ 